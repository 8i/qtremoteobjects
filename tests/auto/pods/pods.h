/****************************************************************************
**
** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the tools applications of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL21$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia. For licensing terms and
** conditions see http://qt.digia.com/licensing. For further information
** use the contact form at http://qt.digia.com/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 or version 3 as published by the Free
** Software Foundation and appearing in the file LICENSE.LGPLv21 and
** LICENSE.LGPLv3 included in the packaging of this file. Please review the
** following information to ensure the GNU Lesser General Public License
** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Digia gives you certain additional
** rights. These rights are described in the Digia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#pragma once
// This is an autogenerated file.
// Do not edit this file, any changes made will be lost the next time it is generated.

#include <QObject>


#include <QString>
class PodI : public QObject
{
    Q_OBJECT
    Q_PROPERTY(int i READ i WRITE setI NOTIFY iChanged)
public:
    explicit PodI(QObject *parent = Q_NULLPTR) : QObject(parent), _i() {}
    explicit PodI(int i, QObject *parent = Q_NULLPTR) : QObject(parent), _i(i) {}
    PodI(const PodI& other)
        : QObject()
    {
        QtRemoteObjects::copyStoredProperties(&other, this);
    }

    PodI &operator=(const PodI &other)
    {
        if (this != &other)
            QtRemoteObjects::copyStoredProperties(&other, this);
        return *this;
    }

    int i() const { return _i; }
    void setI(int i) { if (i != _i) { _i = i; Q_EMIT iChanged(); } }
Q_SIGNALS:
    void iChanged();
private:
    int _i;
};

inline QDataStream &operator<<(QDataStream &ds, const PodI &obj) {
    QtRemoteObjects::copyStoredProperties(&obj, ds);
    return ds;
}

inline QDataStream &operator>>(QDataStream &ds, PodI &obj) {
    QtRemoteObjects::copyStoredProperties(ds, &obj);
    return ds;
}

Q_DECLARE_METATYPE(PodI)

class PodF : public QObject
{
    Q_OBJECT
    Q_PROPERTY(float f READ f WRITE setF NOTIFY fChanged)
public:
    explicit PodF(QObject *parent = Q_NULLPTR) : QObject(parent), _f() {}
    explicit PodF(float f, QObject *parent = Q_NULLPTR) : QObject(parent), _f(f) {}
    PodF(const PodF& other)
        : QObject()
    {
        QtRemoteObjects::copyStoredProperties(&other, this);
    }

    PodF &operator=(const PodF &other)
    {
        if (this != &other)
            QtRemoteObjects::copyStoredProperties(&other, this);
        return *this;
    }

    float f() const { return _f; }
    void setF(float f) { if (f != _f) { _f = f; Q_EMIT fChanged(); } }
Q_SIGNALS:
    void fChanged();
private:
    float _f;
};

inline QDataStream &operator<<(QDataStream &ds, const PodF &obj) {
    QtRemoteObjects::copyStoredProperties(&obj, ds);
    return ds;
}

inline QDataStream &operator>>(QDataStream &ds, PodF &obj) {
    QtRemoteObjects::copyStoredProperties(ds, &obj);
    return ds;
}

Q_DECLARE_METATYPE(PodF)

class PodS : public QObject
{
    Q_OBJECT
    Q_PROPERTY(QString s READ s WRITE setS NOTIFY sChanged)
public:
    explicit PodS(QObject *parent = Q_NULLPTR) : QObject(parent), _s() {}
    explicit PodS(QString s, QObject *parent = Q_NULLPTR) : QObject(parent), _s(s) {}
    PodS(const PodS& other)
        : QObject()
    {
        QtRemoteObjects::copyStoredProperties(&other, this);
    }

    PodS &operator=(const PodS &other)
    {
        if (this != &other)
            QtRemoteObjects::copyStoredProperties(&other, this);
        return *this;
    }

    QString s() const { return _s; }
    void setS(QString s) { if (s != _s) { _s = s; Q_EMIT sChanged(); } }
Q_SIGNALS:
    void sChanged();
private:
    QString _s;
};

inline QDataStream &operator<<(QDataStream &ds, const PodS &obj) {
    QtRemoteObjects::copyStoredProperties(&obj, ds);
    return ds;
}

inline QDataStream &operator>>(QDataStream &ds, PodS &obj) {
    QtRemoteObjects::copyStoredProperties(ds, &obj);
    return ds;
}

Q_DECLARE_METATYPE(PodS)

class PodIFS : public QObject
{
    Q_OBJECT
    Q_PROPERTY(int i READ i WRITE setI NOTIFY iChanged)
    Q_PROPERTY(float f READ f WRITE setF NOTIFY fChanged)
    Q_PROPERTY(QString s READ s WRITE setS NOTIFY sChanged)
public:
    explicit PodIFS(QObject *parent = Q_NULLPTR) : QObject(parent), _i(), _f(), _s() {}
    explicit PodIFS(int i, float f, QString s, QObject *parent = Q_NULLPTR) : QObject(parent), _i(i), _f(f), _s(s) {}
    PodIFS(const PodIFS& other)
        : QObject()
    {
        QtRemoteObjects::copyStoredProperties(&other, this);
    }

    PodIFS &operator=(const PodIFS &other)
    {
        if (this != &other)
            QtRemoteObjects::copyStoredProperties(&other, this);
        return *this;
    }

    int i() const { return _i; }
    void setI(int i) { if (i != _i) { _i = i; Q_EMIT iChanged(); } }
    float f() const { return _f; }
    void setF(float f) { if (f != _f) { _f = f; Q_EMIT fChanged(); } }
    QString s() const { return _s; }
    void setS(QString s) { if (s != _s) { _s = s; Q_EMIT sChanged(); } }
Q_SIGNALS:
    void iChanged();
    void fChanged();
    void sChanged();
private:
    int _i;
    float _f;
    QString _s;
};

inline QDataStream &operator<<(QDataStream &ds, const PodIFS &obj) {
    QtRemoteObjects::copyStoredProperties(&obj, ds);
    return ds;
}

inline QDataStream &operator>>(QDataStream &ds, PodIFS &obj) {
    QtRemoteObjects::copyStoredProperties(ds, &obj);
    return ds;
}

Q_DECLARE_METATYPE(PodIFS)


